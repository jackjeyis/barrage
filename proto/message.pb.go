// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Submit
	Deliver
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_Type_UNDEFINED Type = 0
	Type_SINGLE         Type = 1
	Type_GROUP          Type = 2
	Type_SYSTEM         Type = 3
	Type_ASSISTANT      Type = 4
	Type_APPLICATION    Type = 5
)

var Type_name = map[int32]string{
	0: "Type_UNDEFINED",
	1: "SINGLE",
	2: "GROUP",
	3: "SYSTEM",
	4: "ASSISTANT",
	5: "APPLICATION",
}
var Type_value = map[string]int32{
	"Type_UNDEFINED": 0,
	"SINGLE":         1,
	"GROUP":          2,
	"SYSTEM":         3,
	"ASSISTANT":      4,
	"APPLICATION":    5,
}

func (x Type) String() string {
	return proto1.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Submit_RecvType int32

const (
	Submit_RECV_UNDEFINED Submit_RecvType = 0
	Submit_ALL            Submit_RecvType = 1
	Submit_MOBILE         Submit_RecvType = 2
	Submit_PC             Submit_RecvType = 3
)

var Submit_RecvType_name = map[int32]string{
	0: "RECV_UNDEFINED",
	1: "ALL",
	2: "MOBILE",
	3: "PC",
}
var Submit_RecvType_value = map[string]int32{
	"RECV_UNDEFINED": 0,
	"ALL":            1,
	"MOBILE":         2,
	"PC":             3,
}

func (x Submit_RecvType) String() string {
	return proto1.EnumName(Submit_RecvType_name, int32(x))
}
func (Submit_RecvType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Submit_Priority int32

const (
	Submit_PRI_UNDEFINED Submit_Priority = 0
	Submit_ONE           Submit_Priority = 1
	Submit_TWO           Submit_Priority = 2
	Submit_THREE         Submit_Priority = 3
	Submit_FOUR          Submit_Priority = 4
	Submit_FIVE          Submit_Priority = 5
)

var Submit_Priority_name = map[int32]string{
	0: "PRI_UNDEFINED",
	1: "ONE",
	2: "TWO",
	3: "THREE",
	4: "FOUR",
	5: "FIVE",
}
var Submit_Priority_value = map[string]int32{
	"PRI_UNDEFINED": 0,
	"ONE":           1,
	"TWO":           2,
	"THREE":         3,
	"FOUR":          4,
	"FIVE":          5,
}

func (x Submit_Priority) String() string {
	return proto1.EnumName(Submit_Priority_name, int32(x))
}
func (Submit_Priority) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

// 上行
type Submit struct {
	To       string          `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Type     Type            `protobuf:"varint,2,opt,name=type,enum=proto.Type" json:"type,omitempty"`
	Notify   bool            `protobuf:"varint,3,opt,name=notify" json:"notify,omitempty"`
	Offline  bool            `protobuf:"varint,4,opt,name=offline" json:"offline,omitempty"`
	RecvType Submit_RecvType `protobuf:"varint,5,opt,name=recvType,enum=proto.Submit_RecvType" json:"recvType,omitempty"`
	History  bool            `protobuf:"varint,6,opt,name=history" json:"history,omitempty"`
	Priority Submit_Priority `protobuf:"varint,7,opt,name=priority,enum=proto.Submit_Priority" json:"priority,omitempty"`
}

func (m *Submit) Reset()                    { *m = Submit{} }
func (m *Submit) String() string            { return proto1.CompactTextString(m) }
func (*Submit) ProtoMessage()               {}
func (*Submit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Submit) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Submit) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_Type_UNDEFINED
}

func (m *Submit) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

func (m *Submit) GetOffline() bool {
	if m != nil {
		return m.Offline
	}
	return false
}

func (m *Submit) GetRecvType() Submit_RecvType {
	if m != nil {
		return m.RecvType
	}
	return Submit_RECV_UNDEFINED
}

func (m *Submit) GetHistory() bool {
	if m != nil {
		return m.History
	}
	return false
}

func (m *Submit) GetPriority() Submit_Priority {
	if m != nil {
		return m.Priority
	}
	return Submit_PRI_UNDEFINED
}

// 下行
type Deliver struct {
	From      string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To        string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Type      Type   `protobuf:"varint,4,opt,name=type,enum=proto.Type" json:"type,omitempty"`
}

func (m *Deliver) Reset()                    { *m = Deliver{} }
func (m *Deliver) String() string            { return proto1.CompactTextString(m) }
func (*Deliver) ProtoMessage()               {}
func (*Deliver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Deliver) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Deliver) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Deliver) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Deliver) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_Type_UNDEFINED
}

func init() {
	proto1.RegisterType((*Submit)(nil), "proto.Submit")
	proto1.RegisterType((*Deliver)(nil), "proto.Deliver")
	proto1.RegisterEnum("proto.Type", Type_name, Type_value)
	proto1.RegisterEnum("proto.Submit_RecvType", Submit_RecvType_name, Submit_RecvType_value)
	proto1.RegisterEnum("proto.Submit_Priority", Submit_Priority_name, Submit_Priority_value)
}

func init() { proto1.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x8f, 0xd3, 0x30,
	0x10, 0xc5, 0x89, 0xf3, 0xa7, 0xc9, 0xac, 0x5a, 0xcc, 0x1c, 0x56, 0x3e, 0x20, 0x51, 0xf5, 0x54,
	0x71, 0xe8, 0x61, 0x39, 0x72, 0x0a, 0xad, 0x77, 0xb1, 0x94, 0x4d, 0x22, 0x27, 0x5d, 0xc4, 0x01,
	0xa1, 0x5d, 0xe4, 0x82, 0xa5, 0x66, 0x1d, 0xa5, 0x66, 0xa5, 0x7c, 0x75, 0x4e, 0x28, 0x6e, 0x5a,
	0x04, 0x62, 0x4f, 0x9e, 0xf1, 0xf3, 0xfc, 0x66, 0x3c, 0x0f, 0xa6, 0x8d, 0x3a, 0x1c, 0xee, 0xbf,
	0xab, 0x55, 0xdb, 0x19, 0x6b, 0x30, 0x74, 0xc7, 0xe2, 0x17, 0x81, 0xa8, 0xfa, 0xf9, 0xd0, 0x68,
	0x8b, 0x33, 0x20, 0xd6, 0x30, 0x6f, 0xee, 0x2d, 0x13, 0x49, 0xac, 0xc1, 0x37, 0x10, 0xd8, 0xbe,
	0x55, 0x8c, 0xcc, 0xbd, 0xe5, 0xec, 0xea, 0xe2, 0x58, 0xb7, 0xaa, 0xfb, 0x56, 0x49, 0x27, 0xe0,
	0x25, 0x44, 0x8f, 0xc6, 0xea, 0x5d, 0xcf, 0xfc, 0xb9, 0xb7, 0x8c, 0xe5, 0x98, 0x21, 0x83, 0x89,
	0xd9, 0xed, 0xf6, 0xfa, 0x51, 0xb1, 0xc0, 0x09, 0xa7, 0x14, 0xaf, 0x20, 0xee, 0xd4, 0xb7, 0xa7,
	0x81, 0xc1, 0x42, 0x87, 0xbd, 0x1c, 0xb1, 0xc7, 0x19, 0x56, 0x72, 0x54, 0xe5, 0xf9, 0xdd, 0x40,
	0xfb, 0xa1, 0x0f, 0xd6, 0x74, 0x3d, 0x8b, 0x8e, 0xb4, 0x31, 0x1d, 0x68, 0x6d, 0xa7, 0x4d, 0xa7,
	0x6d, 0xcf, 0x26, 0xff, 0xa3, 0x95, 0xa3, 0x2a, 0xcf, 0xef, 0x16, 0xef, 0x21, 0x3e, 0xf5, 0x40,
	0x84, 0x99, 0xe4, 0xeb, 0xbb, 0xaf, 0xdb, 0x7c, 0xc3, 0xaf, 0x45, 0xce, 0x37, 0xf4, 0x05, 0x4e,
	0xc0, 0x4f, 0xb3, 0x8c, 0x7a, 0x08, 0x10, 0xdd, 0x16, 0x1f, 0x44, 0xc6, 0x29, 0xc1, 0x08, 0x48,
	0xb9, 0xa6, 0xfe, 0x22, 0x87, 0xf8, 0x84, 0xc4, 0x57, 0x30, 0x2d, 0xa5, 0xf8, 0xb7, 0xb6, 0xc8,
	0x39, 0xf5, 0x86, 0xa0, 0xfe, 0x54, 0x50, 0x82, 0x09, 0x84, 0xf5, 0x47, 0xc9, 0x39, 0xf5, 0x31,
	0x86, 0xe0, 0xba, 0xd8, 0x4a, 0x1a, 0xb8, 0x48, 0xdc, 0x71, 0x1a, 0x2e, 0xf6, 0x30, 0xd9, 0xa8,
	0xbd, 0x7e, 0x52, 0x1d, 0x22, 0x04, 0xbb, 0xce, 0x34, 0xe3, 0xfa, 0x5d, 0x3c, 0x1a, 0x42, 0xce,
	0x86, 0xbc, 0x86, 0xc4, 0xea, 0x46, 0x1d, 0xec, 0x7d, 0xd3, 0xba, 0x95, 0xfb, 0xf2, 0xcf, 0xc5,
	0xd9, 0xae, 0xe0, 0x19, 0xbb, 0xde, 0x7e, 0x81, 0xe0, 0xf4, 0xed, 0xe1, 0xfc, 0x6b, 0x74, 0x80,
	0xa8, 0x12, 0xf9, 0x4d, 0x36, 0x4c, 0x9f, 0x40, 0x78, 0x23, 0x8b, 0x6d, 0x49, 0x89, 0xbb, 0xfe,
	0x5c, 0xd5, 0xfc, 0x96, 0xfa, 0x38, 0x85, 0x24, 0xad, 0x2a, 0x51, 0xd5, 0x69, 0x5e, 0xd3, 0x00,
	0x5f, 0xc2, 0x45, 0x5a, 0x96, 0x99, 0x58, 0xa7, 0xb5, 0x28, 0x72, 0x1a, 0x3e, 0x44, 0xae, 0xe1,
	0xbb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xc4, 0x06, 0x5e, 0x68, 0x02, 0x00, 0x00,
}
